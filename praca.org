Pioneers - internetowa implementacja gry "Osadnicy z Catanu" w oparciu o framework Ruby on Rails
* wstęp
** ewolucja WWW - od statycznych stron przez wyszukiwarki i portale do aplikacji użytkowych
** to nie koniec zmian - coraz większą rolę będą odgrywały aplikacje przystosowane dla urządzeń mobilnych
** aplikacje webowe zdobywają coraz większą popularność, rośnie ich znaczenie
** upowszechnia się dostęp do internetu (włącznie z urządzeniami mobilnymi)
** przeglądarki mają coraz większe możliwości
** microsoft office 2010, bez silverlight
** flash czy silverlight jako technologie przejściowe, wsparcie dla
** elementów których nie posiadają starsze przeglądarki, nowe będą miały video, audio, svg, websockets, etc.
** przystosowanie do urządzeń mobilnych ma coraz większe znaczenie
** tworzenie natywnych aplikacji jest trudne i czasochłonne (czasem niemożliwe)
** strona napisana zgodnie ze standardami powinna działać na jeszcze nieistniejących urządzeniach
** niezależność od platform (a od przeglądarek, różnice minimalizują biblioteki JS)
* analiza zagadnienia

** Settlers of Catan
p*** opis
Wieloosobowa gra planszowa wymyślona przez Klausa Teubera, wydana po raz pierwszy w 1995.
http://pl.wikipedia.org/wiki/Osadnicy_z_Catanu
Podstawowa wersja gry jest przeznaczona dla 3-4 graczy, ale istnieją rozszerzenia pozwalające zagrać w 5 lub 6 osób, a gracze opracowali własne zasady dla gry dwuosobowej.
Organizowane są mistrzostwa świata (w 2010 organizowane po raz 10), mistrzostwa Polski, turnieje w całej polsce.
*** elementy gry
- 37 sześciokątów z przypisanymi wartościami
  - las - drewno
  - pole uprawne - zboże
  - łąka - wełna
  - góra - kamień
  - wzgórze - cegły
  - pustynia
  - morze (szlaki handlowe)
- drogi, osady, miasta
- karty surowców
- karty rozwoju
- karty specjalne - najdłuższa droga, największa armia
- rozbójnik (robber)
- dwie sześciościenne kości
**** prawdopodobieństwo
**** handel
- z bankiem
  - 4:1 - domyślny przelicznik
  - 3:1 - port ogólny
  - 2:1 - port specjalny
- z innymi graczami
**** karty rozwoju
karty armii
karty postępu („monopol”, „urodzaj”)
karty „punkt zwycięstwa”
**** walka
Rozbójnik, karty armii.
**** cel gry
Celem gry jest zdobycie 10 punktów zwycięstwa,
przyznawanych za:
- osadę - 1 punkt
- miasto - 2 punkty
- najdłuższą drogę - 2 punkty
- największą armię - 2 punkty
- kartę rozwoju „punkt zwycięstwa” - 1 punkt (ukryty)
* analiza istniejących rozwiązań
** Pioneers
*** GNU GPL
*** napisany w C
*** wymaga instalacji
** JSettlers
*** GNU GPL
*** wymaga Javy
** Solito Server
*** oprogramowanie własnościowe
*** wymaga Adobe Flash
** MSN Games, PlayCatan.com
*** oprogramowanie własnościowe
*** płatne
*** wymaga instalacji i systemu Microsoft Windows
** Catan - The First Island
*** oprogramowanie własnościowe
*** płatne
*** gra z przeciwnikiem komputerowym lub przez Bluetooth
* określenie funkcji aplikacji, technologii
- serwer napisany w oparciu Ruby on Rails
- zaprojektowany przy użyciu REST
- aplikacja typu RIA
- wymagana jedynie współczesna przeglądarka internetowa
(CSS 2.0, JavaScript wraz z XMLHttpRequest)
- wolne oprogramowanie
- podstawowa wersja „Osadników”, z możliwością
- zaimplementowania dodatków („Żeglarze”, itp.)
- zmienne rozmiary i kształt planszy
- możliwość modyfikacji niektórych zasad gry
** Licencja
Affero General Public License wersja 3
http://en.wikipedia.org/wiki/Affero_General_Public_License
Potrzebny duży nakład pracy, w szczególności na część kliencką. Wolne oprogramowanie powinno pomóc w rozwoju.
** Ruby
- 1995 rok, Yukihiro Matsumoto aka Matz
- inspirowany przez CLU, Eiffel, Lisp, Perl, Python, Smalltalk
- interpretowany
- wieloparadygmatowy
- bardzo wysokiego poziomu (VHLL)
- w pełni obiektowy
- uniwersalny (bogata biblioteka standardowa)
- wiele implementacji na wiele różnych platform
- dziedziczenie jednobazowe
- moduły (pełnią dwie role)
- duck typing
- otwarte klasy
- monkey patching
- metaprogramowanie (wraz z method missing)
- system paczek RubyGems
- zależności pomiędzy gemami
- łatwa aktualizacja gemów
- ponad 7700 gemów w repozytorium (poprzednia prezentacja 4000), 11500 (8.08.2009)
- „pseudo-code that runs” - skupianie się na rozwiązaniu
- problemu, nie na języku
- język zaprojektowany dla ludzi
- radość z programowania
- TIMTOWTDI - wolność wyboru (jak w Perlu, przeciwnie niż w Pythonie)
- zasada najmniejszego zaskoczenia - Ruby jest intuicyjny
** Ruby on Rails
- David Heinemeier Hansson, 2004 r.
- kompletny framework do tworzenia aplikacji
- internetowych opartych o bazy danych
- wzorzec MVC
- licencja MIT
- nie ma oficjalnego środowiska pracy ani systemu operacyjnego
- wspaniała społeczność, darmowe Railscasty, podcasty, Rails Magazine, podręczniki, fora, grupy dyskusyjne
- użycie Gita jako systemu kontroli wersji (545 forków repozytorium na samym Githubie)
- wpływ na rozwój frameworka (Lighthouse), możliwość dodawania łat
** Merb
- Ezra Zygmuntowicz, Yehuda Katz, początek 2008 r.
- powstał dzięki doświadczeniu zdobytemu po 4 latach
- rozwoju Ruby on Rails
- wszystkie najlepsze cechy frameworka Ruby on Rails
- lepiej zaprojektowany
- większa wydajność
- wolność wyboru (ORM, biblioteki JavaScript, systemu szablonów)
- Merb 2.0 == Ruby on Rails 3.0
- pierwsza wersja jeszcze w tym roku
- prace trwają!
** JavaScript
- obiektowy, funkcyjny, intepretowany
- wyrażenia lambda, domknięcia
- spore możliwości
- dostępny w każdej współczesnej przeglądarce
- najbardziej niezrozumiany język świata
- czasem określany jako dialekt Lispa (dokładniej Scheme)
- XMLHttpRequest
*** XMLHTTPRequest
http://en.wikipedia.org/wiki/XMLHttpRequest
*** HTTP Push (aka Comet)
http://en.wikipedia.org/wiki/Comet_%28programming%29
Protokół Bayeux rozwijany przez DOJO Foundation
http://svn.cometd.com/trunk/bayeux/bayeux.html
**** Orbited http://orbited.org/
**** Meteor Server http://meteorserver.org/
**** Kaazing http://www.kaazing.com/
**** http://cometdaily.com/maturity.html
** YUI3
* projektowanie aplikacji
** schemat bazy danych
** przechowywanie planszy w bazie danych
** maszyna stanowa
** komunikacja
*** JSON
*** przesyłanie całego stanu gry
* implementacja
** modele
*** game
**** atrybuty
id, state, created_at, updated_at, current_turn, phase,
current_discard_resource_limit, army_cards, monopoly_cards,
year_of_plenty_cards, road_building_cards, victory_point_cards,
largest_army_size, largest_army_player_id, longest_road_length,
longest_road_player_id, cards_count(?), card_id,
current_discard_player_id, current_player_id
**** maszyna stanowa stanu
- po każdym zapisie wywoływana jest metoda end_game (zwykle nie
  następuje przejście)
**** maszyna stanowa fazy
- każdy event przyjmuje użytkownika, sprawdza, czy może on wywołać
  dany event w tym momencie - dodane ,,puste'' eventy
**** liczenie najdłuższej drogi
*** board
**** atrybuty
id, game_id, height, width, robber_col, robber_rol
*** edge
**** atrybuty
id, row, col, player_id, board_id
*** hex
**** atrybuty
id, row, col, hex_type, roll, board_id, harbor_position, harbor_type
*** node
**** atrybuty
id, row, col, player_id, board_id, state
*** player
**** atrybuty
id, bricks, grain, ore, wool, lumber, settlements, cities, roads,
number, user_id, game_id, points, state, resources(?), visible_points,
hidden_points, bricks_exchange_rage, grain_exchange_rate,
lumber_exchange_rate, ore_exchange_rate, wool_exchange_rate, army_size
*** card
**** atrybuty
id, game_id, player_id, type, state, bricks, grain, lumber, ore, wool,
created_at, updated_at, resource_type
**** STI
Card::Army, Card::Monopoly, Card::RoadBuilding
Card::VictoryPoint, Card::YearOfPlenty
*** dice_roll
**** atrybuty
id, game_id, value, turn, created_at, updated_at, player_id
*** discard
**** atrybuty
id, lumber, grain, bricks, wool, ore, player_id, game_id, created_at,
updated_at
*** exchange
**** atrybuty
id, lumber, grain, bricks, wool, ore, player_id, game_id, created_at,
updated_at
*** offer
**** atrybuty
id, lumber, grain, bricks, wool, ore, sender_id, recipient_id,
game_id, created_at, updated_at, state
*** offer_response
**** atrybuty
id, player_id, offer_id, agreed, created_at, updated_at
*** robbery
**** atrybuty
id, created_at, updated_at, row, col, bricks, grain, lumber, ore,
wool, game_id, sender_id, recipient_id
*** user
**** atrybuty
id, login, crypted_password, password_salt, persistence_token,
login_count, last_request_at, last_login_at, current_login_at,
last_login_ip, current_login_ip, created_at, updated_at
*** user_session
** kontrolery, akcje, routing
*** routing
ActionController::Routing::Routes.draw do |map|
  map.resource :user
  map.resource :user_session
  map.resources :messages
  map.resources :games do |games|
    games.resource :offer
    games.resource :offer_response
    games.resource :player
    games.resources :cards
    games.resources :dice_rolls
    games.resources :discards
    games.resources :edges
    games.resources :exchanges
    games.resources :hexes
    games.resources :nodes
    games.resources :robberies
  end
  map.root :controller => "games", :action => "index"
end
*** games
**** tworzenie gry
**** wyświetlenie gry
**** lista gier
**** kończenie tury
*** cards
**** tworzenie karty rozwoju
**** używanie karty rozwoju
*** dice_rolls
**** rzut kością
*** discards
**** odrzucanie kart zasobów
*** edges
**** tworzenie krawędzi (drogi)
*** nodes
**** tworzenie wierzchołka (osady)
**** rozwój osady do miasta
*** exchanges
**** tworzenie wymiany z bankiem
*** offers
**** tworzenie oferty
**** akceptowanie/odrzucenie oferty
*** offer_responses
**** tworzenie odpowiedzi na ofertę
*** players
**** tworzenie gracza
**** zmiana stanu gracza (ready)
**** usuwanie gracza
*** robberies
**** tworzenie rabunku (robbery)
** widoki
*** HAML
*** SASS
**** wyświetlanie planszy
* implementacja klienta
** początkowo jQuery i jQuery UI
- niewielka biblioteka standardowa
- małe możliwości reużywania kodu (niewielkie wsparcie)
- duża ilość pluginów, lecz ich jakość stawia wiele do życzenia
** YUI3
- bardzo bogata biblioteka standardowa (wszystko na starcie)
- wersja beta
- dużo możliwości reużywania kodu
- brak pluginów (praktycznie nic jeszcze nie istnieje)
- głównie chęć poznania biblioteki
** komunikacja
- dane o planszy pobierane okresowo
- po wysłaniu żądania (np. rzutu kością) dane otrzymujemy od razu -
  dzięki temu użytkownik nie widzi większych opóźnień
** logika gry
- w zasadzie konieczność przeniesienia dużej części funkcji modeli z
  serwera RoR do kodu JS
** widgety
- after-roll
- before-roll
- board
- build
- cards
- discard
- exchange
- game
- game-status
- join
- monopoly
- offer
- offer-received
- offer-sent
- players
- resources
- resource-spinner
- user-player
- year-of-plenty
* uruchomienie i przeprowadzenie testów
** testy jednostkowe
* podsumowanie
** osiągnięte zostały najważniejsze cele
** konieczność przystosowania aplikacji do stabilnej YUI 3 GA
** layout, design, interface, grafika
** dodanie czatu, statystyki, usprawnienia interfejsu użytkownika
** przystosowanie aplikacji do urządzeń mobilnych
** potrzebnych jest wiele elementów, których zrobienie przekracza możliwości jednego programisty
** umożliwienie dalszego rozwoju gry, zaimplementowana została podstawowa wersja, możliwość dodania dodatków
** możliwość podpatrzenia i ponownego wykorzystania niektórych rozwiązań
